//Задача 1
/Написать функцию counter(n), которая выводит в консоль раз в секунду числа n, n-1 ... 2, 1, 0 и останавливается.

function counter(n){
    let timer = setInterval(function(){
        console.log(n);
        n -= 1;
        if(n < 0) clearInterval(timer);
    },1000)
}

counter(10);

/Написать функцию createCounter(n)

function createCounter(n){
    let count = n;
    let timer;

    function start(){
        timer = setInterval(function(){
        console.log(count);
        count -= 1;
        if(count < 0) clearInterval(timer);
    },1000)
    }
    function pause(){
        clearInterval(timer);
    }
    function stop(){
        clearInterval(timer);
        count = n;
    }
    
    return {
        start,
        pause,
        stop
    }
}

let a = createCounter(10);
a.start();

//Задача 2
/Написать функцию delay(N), возвращающую промис, который сделает resolve() через N секунд.

function delay(n) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve();
        }, n * 1000);
    });
}
delay(5)

/Решить задачу со счётчиком N, N-1 ... 2, 1, 0 через функцию delay

function delay(n) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve();
        }, n * 1000);
    });
}

function delayCounter(n) {
    if(n < 0) return
    console.log(n);
    delay(1).then(result => {
        delayCounter(n - 1);
    })
}
delayCounter(5);

/Написать функцию, возвращающую название первого репозитория на github.com по имени пользователя

async function getFirstRepository(username) {
        const response = await fetch(`https://api.github.com/users/${username}`);
        const userData = await response.json();
        const reposResponse = await fetch(userData.repos_url);
        const reposData = await reposResponse.json();
        const firstRepo = reposData[0];
        return firstRepo.name;
}

//Задача 3 (на async/await)

class HttpError extends Error {
  constructor(response) {
    super(`${response.status} for ${response.url}`);
    this.name = 'HttpError';
    this.response = response;
  }
}

async function loadJson(url) {
  const response = await fetch(url);
  if (response.status == 200) {
    return response.json();
  } else {
    throw new HttpError(response);
  }
}

async function getGithubUser() {
  let user;
  while (!user) {
    let name = prompt("Введите логин?", "iliakan");
    try {
      user = await loadJson(`https://api.github.com/users/${name}`);
      alert(`Полное имя: ${user.name}.`);
    } catch (err) {
      if (err instanceof HttpError && err.response.status == 404) {
        alert("Такого пользователя не существует, пожалуйста, повторите ввод.");
      } else {
        throw err;
      }
    }
  }
  return user;
}

getGithubUser();
